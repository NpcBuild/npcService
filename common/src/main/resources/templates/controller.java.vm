package ${package.Controller};
import com.baomidou.mybatisplus.plugins.Page;
import com.lk.common.model.ResponseCode;
import com.lk.common.model.ResponseDataModel;
import com.example.demo.service.db.dto.${entity}Dto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

/**
 * <p>
 * ${table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("/${table.entityPath}")
@Api(value = "/${table.entityPath}", description = "${table.comment} 相关接口")
public class ${entity}Controller {
    
    private static final Logger logger = LoggerFactory.getLogger(${entity}Controller.class);

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;


    /**
     * 保存、修改 【区分id即可】
     * @param ${table.entityPath} 传递的实体
     * @return ResponseDataModel转换结果
     */
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ApiOperation(response = ResponseDataModel.class, value = "${table.comment} 添加 修改接口, 填入Id为更新, 不填Id为新增")
    public ResponseDataModel<?> save(@RequestBody @Validated ${entity} ${table.entityPath}) {
        try {
            ${entity} obj = ${table.entityPath}Service.save(${table.entityPath});
            return new ResponseDataModel<>(ResponseCode.SUCCESS.code(), "保存成功", obj);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseDataModel<>(ResponseCode.BUSSINESS_EXCEPTION, "保存失败");
        }
    }


    /**
     * 通过Id 删除对象
     * @param id 要删除的实体
     * @return ResponseDataModel转换结果
     */
    @GetMapping("delete${entity}ById")
    @ApiOperation(response = ResponseDataModel.class, value = "通过id 删除对象")
    public ResponseDataModel<?> delete(@RequestParam("id") Integer id) {

        try {
            ${entity} ${table.entityPath} =${table.entityPath}Service.delete${entity}ById(id);
            return new ResponseDataModel<>(ResponseCode.SUCCESS.code(), "删除成功", ${table.entityPath});
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseDataModel<>(ResponseCode.BUSSINESS_EXCEPTION, "删除失败");
        }
    }

    /**
     * 批量删除 ${table.comment}
     * @param ids
     * @return
     */
    @GetMapping("batchDelete${entity}ByIdList")
    @Transactional(rollbackFor = Exception.class)
    @ApiOperation(response = ResponseDataModel.class, value = "批量删除 ${table.comment}")
    public ResponseDataModel<?> batchDelete${entity}ByIdList(@RequestParam("ids") Integer[] ids) {

            ${table.entityPath}Service.batchDelete${entity}ByIdList(ids);
        return new ResponseDataModel<>(ResponseCode.SUCCESS, "批量删除成功");
    }


    /**
     * 通过Id 获取对象
     * @param id
     * @return ResponseDataModel转换结果
     */
    @RequestMapping(value = "/get${entity}ById", method = RequestMethod.GET)
    @ApiOperation(response = ResponseDataModel.class, value = "通过Id 获取 ${table.comment} ")
    public ResponseDataModel<?> get(@RequestParam("id") Long id) {
        ${entity} ${table.entityPath} =${table.entityPath}Service.selectById(id);
        return new ResponseDataModel<>(${table.entityPath});
    }


    /**
     * 分页查询数据：
     * @param ${table.entityPath}Dto 查询对象
     * @return PageList 分页对象
     */
    @RequestMapping(value = "/get${entity}List", method = RequestMethod.GET)
    @ApiOperation(response = ResponseDataModel.class, value = "${table.comment} 分页查询数据")
    public ResponseDataModel<?> get${entity}List(@Validated ${entity}Dto ${table.entityPath}Dto) {
        Page<${entity}> page = ${table.entityPath}Service.get${entity}List(${table.entityPath}Dto);
        return new ResponseDataModel<>(page.getTotal(), page.getRecords());
    }
}

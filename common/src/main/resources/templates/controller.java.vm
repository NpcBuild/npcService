package ${package.Controller};
import com.npc.core.ServerResponseEnum;
import com.npc.core.ServerResponseVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

import java.util.Arrays;

/**
 * <p>
 * ${table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("/${table.entityPath}")
@Api(value = "/${table.entityPath}", description = "${table.comment} 相关接口")
public class ${entity}Controller {
    
    private static final Logger logger = LoggerFactory.getLogger(${entity}Controller.class);

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;


    /**
     * 保存、修改 【区分id即可】
     * @param ${table.entityPath} 传递的实体
     * @return ServerResponseVO转换结果
     */
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ApiOperation(response = ServerResponseVO.class, value = "${table.comment} 添加 修改接口, 填入Id为更新, 不填Id为新增")
    public ServerResponseVO<?> save(@RequestBody @Validated ${entity} ${table.entityPath}) {
        try {
            Boolean obj = ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
            return ServerResponseVO.success(obj);
        } catch (Exception e) {
            e.printStackTrace();
            return ServerResponseVO.error(ServerResponseEnum.SAVE_FAILED);
        }
    }


    /**
     * 通过Id 删除对象
     * @param id 要删除的实体
     * @return ServerResponseVO转换结果
     */
    @GetMapping("delete${entity}ById")
    @ApiOperation(response = ServerResponseVO.class, value = "通过id 删除对象")
    public ServerResponseVO<?> delete(@RequestParam("id") Integer id) {

        try {
            Boolean ${table.entityPath} =${table.entityPath}Service.removeById(id);
            return ServerResponseVO.success(${table.entityPath});
        } catch (Exception e) {
            e.printStackTrace();
            return ServerResponseVO.error(ServerResponseEnum.DELETE_FAILED);
        }
    }

    /**
     * 批量删除 ${table.comment}
     * @param ids
     * @return
     */
    @GetMapping("batchDelete${entity}ByIdList")
    @Transactional(rollbackFor = Exception.class)
    @ApiOperation(response = ServerResponseVO.class, value = "批量删除 ${table.comment}")
    public ServerResponseVO<?> batchDelete${entity}ByIdList(@RequestParam("ids") Integer[] ids) {
        ${table.entityPath}Service.removeBatchByIds(Arrays.asList(ids));
        return ServerResponseVO.success();
    }


    /**
     * 通过Id 获取对象
     * @param id
     * @return ServerResponseVO转换结果
     */
    @RequestMapping(value = "/get${entity}ById", method = RequestMethod.GET)
    @ApiOperation(response = ServerResponseVO.class, value = "通过Id 获取 ${table.comment} ")
    public ServerResponseVO<?> get(@RequestParam("id") Long id) {
        ${entity} ${table.entityPath} =${table.entityPath}Service.getById(id);
        return ServerResponseVO.success(${table.entityPath});
    }


    /**
     * 分页查询数据：
     * @param ${table.entityPath}Dto 查询对象
     * @return PageList 分页对象
     */
    @RequestMapping(value = "/get${entity}List", method = RequestMethod.GET)
    @ApiOperation(response = ServerResponseVO.class, value = "${table.comment} 分页查询数据")
    public ServerResponseVO<?> get${entity}List(@Validated ${entity}Dto ${table.entityPath}Dto) {
        Page page = new Page(${table.entityPath}Dto.getPageNum(), ${table.entityPath}Dto.getPageSize());
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper(${table.entityPath}Dto);
        Page<${entity}> pages = ${table.entityPath}Service.page(page, queryWrapper);
        return ServerResponseVO.success(pages);
    }
}
